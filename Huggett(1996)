clear
clc

%% Q1
a_max  = 100;
a_min  = 0;
nkk    = 100;

a_grid = linspace(a_min,a_max,nkk);
% a_grid = a_min + (a_max - a_min) * linspace(0, 1, nkk).^2;
%a_grid = a_max - (a_max - a_min) * linspace(0, 1, nkk).^2;


%% Q2
rho    = 0.9;
sigma_eps  = 0.2;
mu     =0; %the mean of the log z, provided that under level, the unconditional mean of z equals to 1, by Delta method, the mean of the log z should be 0, shouldn't it?
m      =2; % the range of 4 sigmas as mentioned in the paper, but can change to 6 so as to consider extreme earnings shocks
nzz    = 5; % 18 possible states as mentioned in the paper

[logz,logzprob] = tauchen(nzz,mu,rho,sigma_eps,m); %%% take the exponent!!!

%% Q3
survival_rate = xlsread("survival_rate.xlsx");

%to compute the fraction of the population phi_j in each age group j
n = 0.01; %the rate of population growth
phi =zeros(length(survival_rate),1);

for j = 1:length(survival_rate)
    if j == 1
        phi(j) = survival_rate(j)/(1+n);
    else
        phi(j) = (survival_rate(j)/(1+n) )*phi(j-1);
    end
end

phi = phi./sum(phi);



%% Q4
lambda0 = 0.195;
lambda1 = 0.107;
lambda2 = -0.00213;

jr = 41;
j  = 71;

%to compute the matrix of efficiency
efficiency = zeros(j,nzz);
for i = 1:j
    for z = 1:nzz
        if i < jr
            p_j = lambda0 + lambda1*i + lambda2*i^2;
            efficiency(i,z) = exp(logz(z))*p_j;
        elseif i >=jr
            efficiency(i,z) = 0;
        end
    end
end

% figure
% for z =1:nzz
%     plot(1:j,efficiency(:,z))
%     hold on
%     legend('Z = z')
% end


%to compute the total labor supply L 

%First find the stationary distribution of z
prob0 = 1/nzz*ones(1,nzz);
tol = 10;

while tol > 10^(-10)
    prob1 = prob0*logzprob;
    tol = abs(max(prob0-prob1));
    prob0 = prob1;
end

stationary_z = prob0; 

%now compute the aggregate supply
mean_efficiency=zeros(j,1);
for i = 1:j
    mean_efficiency(i) = stationary_z*efficiency(i,:)';
end

L = sum(phi.*mean_efficiency);
    
%% Q5
sigma =2;
beta  = 0.96;
a_low = 0;

%CD production function
alpha = 0.36; %capital share
delta = 0.08; %depreciation rate
A     = 1;    %aggregate productivity

tol_T = 10^(-4);
tol_a = 10^(-2);

iter_max_T = 100;
iter_max_a = 100;
iter_T = 1;
iter_a = 1;

%%


%% Q6
r_g   = 0.02; % a guess for interest rate

%% Q7

% Aggregate capital demand
agg_K = (1+n)*((r_g+delta)/(alpha*A*L^(1-alpha)))^(1/(alpha-1));

% wage
wage  = (1-alpha)*A*agg_K^alpha*L^(-alpha);

omega = 0.5; %replacement rate
%to compute the associated pension b
b = omega*wage*L/(sum(phi(1:jr-1)));

% equilibrium payroll tax
theta = b*sum(phi(jr:end))/(wage*L);

%% Q8
T_g = 1.2; % Initial guess of accidental bequests 
while iter_a <iter_max_a
%% Q9 Solve for the HH problem to obtain the policy function g_a_j
while iter_T<iter_max_T
a_egm = zeros(j,nkk,nzz); %note that here the nkk refers to the grids for the asset holding tomorrow
%policy_a_egm = zeros(length(query_a),length(query_a),j,nzz); %note that here the nkk refers to the grids for the asset holding today
int_a = linspace(a_min,a_max,10000);

%Cash-at-hand for (j,nzz)
d = zeros(j,nzz);
for p = 1:j %Given the age
    for q = 1:nzz %Given the shock of today
        if p<jr
            d(p,q) = (1-theta)*efficiency(p,q)*wage + T_g;
        elseif p<=j && p>=jr 
            d(p,q) = b+T_g;
        end
    end
end

g_a=zeros(j,nkk,nzz); %%%% This is the policy function, the aprime, to be interpolated.
for p = j:-1:2 %Given the age
    for q = 1:nkk % Given the asset holding TOMORROW!
        for z = 1:nzz %Given the shock TODAY!
            a_egm(p,q,z) = a_grid(q);
            RHS = (beta*survival_rate(p-1)*(1+r_g)* (logzprob(z,:)*((a_grid(q)*(1+r_g) + d(p,:)'-squeeze(g_a(p,q,:))).^(-sigma))))^(-1/sigma);
            a_egm(p-1,q,z) = (RHS + a_grid(q) - d(p-1,z))/(1+r_g);
        end
    end
    for z = 1:nzz %Given each shock of today, we need to interpolate the a(a',z)
        g_a(p-1,:,z) = interp1(a_egm(p-1,:,z),a_grid,a_grid,'linear','extrap'); %Note that here we switch a and a', and then interpolate and extrapolate it.
        ind = find(g_a(p-1,:,z)<0);
        g_a(p-1,ind,z) =0;
    end
end
% %policy function for age 35
% figure
% for z= 1:nzz
%     plot(a_grid,g_a(10,:,z))
%     hold on
%     plot(a_grid,a_grid,':')
% end
% 
% %policy function for age 70
% figure
% for z =1:nzz
%     plot(a_grid,g_a(70,:,z))
%     hold on
%     plot(a_grid,a_grid,':')
% end
% 
% figure
% diff70 = zeros(nkk,nzz);
% for z = 1:nzz
%     diff70(:,z) = squeeze(g_a(70,:,z))'-a_grid';
%     plot(a_grid,diff70(:,z));
%     hold on
% end
% 
% figure
% diff35 = zeros(nkk,nzz);
% for z = 1:nzz
%     diff35(:,z) = squeeze(g_a(10,:,z))'-a_grid';
%     plot(a_grid,diff35(:,z));
%     hold on
% end

%% Q10  

%Compute the transition matrix
TM =[]; %Transition matrix

for p = 1:j %Given the age
    transition_j = zeros(nkk*nzz); %Note that for the transition matrix here, I think it's more convenient to design that each row represents each state of today given by asset holding today, instead of each asset holding today given state of today
    for q = 1:nkk %Given the asset holding today
        for z = 1:nzz %Given the state of today
            if g_a(p,q,z) ==a_grid %If the policy function is exactly in the vector of the grids of asset holding tomorrow, then it's easy to insert the probabilities into the transition matrix.
                idx = find(g_a(p,q,z) ==a_grid);
                transition_j(q*z,(idx-1)*nzz+1:idx*nzz) = logzprob(z,:);
            elseif g_a(p,q,z) ~= a_grid %If the value of the policy function is b/w two values in the vector of the grids for asset holding tomorrwo, then we need to find the two grids surrounding the given value, and then compute the weights used to assign the probabilities for asset holding tomorrow surrounding the resulted value of the policy function.
                lower_idx = find(a_grid<=g_a(p,q,z),1,'last');
                upper_idx = find(a_grid>g_a(p,q,z),1,'first');
                weight_low = (g_a(p,q,z) - a_grid(lower_idx))/(a_grid(upper_idx)-a_grid(lower_idx));
                weight_high = 1-weight_low;
                transition_j(q*z,(lower_idx-1)*nzz+1:lower_idx*nzz) = weight_low*logzprob(z,:);
                transition_j(q*z,(upper_idx-1)*nzz+1:upper_idx*nzz) = weight_high*logzprob(z,:);
            end
        end
    end
    TM = [TM;transition_j]; %Now we have the transition matrix for every cohort.
end

%Compute the initial distribution
initial_distribution = kron(ones(nkk,1),stationary_z'); % the initial distribution where people hold zero asset.
%initial_distr = zeros(nkk*nzz,1);
% for q = 1:nkk %Given the asset holding today
%     for z = 1:nzz %Given the state of today


%Simulation for each age
distrubtion_j = zeros(nkk*nzz,j);
for p = 1:j
    if p ==1
        distrubtion_j(:,p) = TM((p-1)*nkk*nzz+1:p*nkk*nzz,:)*initial_distribution;
    else
        distrubtion_j(:,p) = TM((p-1)*nkk*nzz+1:p*nkk*nzz,:)*distrubtion_j(:,p-1);
    end
end

%The transfer
T_j = zeros(j,1);
for p = 1:j %For each age
    benefit = zeros(nkk*nzz,j);
    for q = 1:nkk %Given the asset holding today
        g_a_j = squeeze(g_a(p,:,:));
        benefit((q-1)*nzz+1:q*nzz,p)=(1+r_g)*distrubtion_j((q-1)*nzz+1:q*nzz,p).*g_a_j(q,:)';
    end
    T_j(p) = phi(p)*(1-survival_rate(p))*sum(benefit(:,p));
end

agg_T =sum(T_j);

%Aggregate capital supply
a_supply_j = zeros(nkk*nzz,j);
for p = 1:j
    for q = 1:nkk
        g_a_j = squeeze(g_a(p,:,:));
        a_supply_j((q-1)*nzz+1:q*nzz,p) = phi(p)*distrubtion_j((q-1)*nzz+1:q*nzz,p).*g_a_j(q,:)';
    end
end

agg_a_supply = sum(a_supply_j,'all');


%Check the convergence
diff_T = abs(agg_T - T_g);
diff_a = abs(agg_a_supply-agg_K);

if diff_T < tol_T
    break
else
    T_g = agg_T;
end

disp(strcat("Difference_T:", string(diff_T)))
disp(strcat("Transfer:", string(agg_T)))

iter_T =iter_T+1;
end

if diff_a < tol_a
    break
else
    %%%%%%%%%%%
    r_g_new = MPK;

    r_g = 0.5*r_g_new + 0.5*r_g;   %Siyu

    r_g = 0.5*r_g_new + 0.5*0.02;  %Hanjing
end


disp(strcat("Difference_a:", string(diff_a)))
disp(strcat("interest rate:", string(r_g)))
iter_a =iter_a +1;

end


















